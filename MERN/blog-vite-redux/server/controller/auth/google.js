import generateToken from '../../utils/generateToken.js'
import User from '../../model/user.model.js'
import bcrypt from 'bcrypt'
import { generateUsername } from '../../utils/generateUsername.js'

const google = async (req, res, next) => {
  const { email, name, googlePhotoUrl } = req.body

  try {
    // check if user exists
    const user = await User.findOne({ email })
    if (user) {
      generateToken(res, user._id, user.isAdmin)
      const sendBack = {
        _id: user._id,
        username: user.username,
        email: user.email,
        profilePicture: user.profilePicture,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      }
      res.status(200).json(sendBack)

      // if user does not exist, create a new user
    } else {
      const generatedPassword = Math.random().toString(36).slice(-8)
      const hashedPassword = await bcrypt.hash(generatedPassword, 10)
      const newUser = new User({
        // username should be generated by email and random number
        username: generateUsername(email),
        email,
        password: hashedPassword,
        profilePicture: googlePhotoUrl,
      })
      const savedUser = await newUser.save()
      generateToken(res, savedUser._id, savedUser.isAdmin)
      const sendBack = {
        _id: savedUser._id,
        username: savedUser.username,
        email: savedUser.email,
        profilePicture: savedUser.photo,
        isAdmin: savedUser.isAdmin,
        createdAt: savedUser.createdAt,
        updatedAt: savedUser.updatedAt,
      }
      res.status(201).json(sendBack)
    }
  } catch (error) {
    next(error)
  }
}

export default google
